 /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.isa.view.indicadores;

import com.mycompany.isa.ISA;
import com.mycompany.isa.utility.DataTransfer;
import java.awt.Color;
import javax.swing.JTextField;

/**
 *
 * @author naoki
 */
public class IndicadorItemPanel extends javax.swing.JPanel {
    Double[] qualidade = {7., 3.5, 0.};
    Color[] qCor = {Color.GREEN, Color.YELLOW, Color.RED};
    Color[] backCor = {new Color(150, 255, 150), new Color(255, 255, 150), new Color(255, 150, 150)};
    
    String indicadorNome;
    int tab, row;
    /**
     * Creates new form IndicadoresPanel
     */
    public IndicadorItemPanel() {
        indicadorNome = "Sem nome";
        initComponents();
    }
    
    public IndicadorItemPanel(int tab, int row, String indicadorNome) {
        this.indicadorNome = indicadorNome;
        this.tab = tab;
        this.row = row;
        initComponents();
        initAll();
    }
    
    private void initAll() {
        double value = IndicadoresFrame.lote.getScore(tab, row);
        txtValorItem.setText(String.valueOf(value));
        checkValue();  
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblNomeItem = new javax.swing.JLabel();
        txtValorItem = new javax.swing.JFormattedTextField();

        setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(0, 0, 0)));

        lblNomeItem.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblNomeItem.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblNomeItem.setText("<html><p style=\"width:250px\">"+indicadorNome+"</p></html>");
        lblNomeItem.setIconTextGap(1);

        txtValorItem.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("0.0"))));
        txtValorItem.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtValorItem.setText("0,0");
        txtValorItem.setToolTipText("");
        txtValorItem.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtValorItem.setName(""); // NOI18N
        txtValorItem.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtValorItemCaretUpdate(evt);
            }
        });
        txtValorItem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtValorItemFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtValorItemFocusLost(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblNomeItem, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtValorItem, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblNomeItem, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 1, Short.MAX_VALUE))
            .addComponent(txtValorItem)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtValorItemCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtValorItemCaretUpdate
        checkValue();
//        txtValorItem.setSize(30, txtValorItem.getHeight());
    }//GEN-LAST:event_txtValorItemCaretUpdate

    private void txtValorItemFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtValorItemFocusLost
        Double valor = 0.0;
        try {
            valor = Double.valueOf(txtValorItem.getText().replace(",", "."));
            if (valor > 10 || valor < 0) {
                valor = 0d;
            }
        } catch (NumberFormatException e) {
        }
        txtValorItem.setText(String.format("%.2f", valor));
        IndicadoresFrame.lote.setScore(tab, row, valor);
        DataTransfer.exportLote(IndicadoresFrame.lote);        
    }//GEN-LAST:event_txtValorItemFocusLost

    private void txtValorItemFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtValorItemFocusGained
        txtValorItem.selectAll();
    }//GEN-LAST:event_txtValorItemFocusGained

    private void checkValue() {
        Double valor = 0.0;
        try {
            valor = Double.valueOf(txtValorItem.getText().replace(",", "."));
            if (valor > 10 || valor < 0) {
                valor = 0d;
            }
        } catch (NumberFormatException e) {
        }
        IndicadoresFrame.lote.setScore(tab, row, valor);
        DataTransfer.exportLote(IndicadoresFrame.lote);
        updateTxtColor();
    }
    public void updateTxtColor() {
        Double valor;
        try {
            valor = Double.valueOf(txtValorItem.getText().replace(",", "."));
        } catch (NumberFormatException e) {
            txtValorItem.setBackground(Color.WHITE);
            txtValorItem.setForeground(Color.RED);
            return;
        }
        if (valor < 0 || valor > 10) {
            txtValorItem.setBackground(Color.WHITE);
            txtValorItem.setForeground(Color.RED);
            return;
        }
        for (int i=0; i<qualidade.length; i++) {
            if (valor >= qualidade[i]) {
                txtValorItem.setBackground(backCor[i]);
                txtValorItem.setForeground(qCor[i].darker());
                break;
            }
        }
    }
    
    public JTextField getTxtValorItem() {
        return txtValorItem;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblNomeItem;
    private javax.swing.JFormattedTextField txtValorItem;
    // End of variables declaration//GEN-END:variables
}
